DROP TABLE TB_TAG_TITLE_SIMILARITY CASCADE CONSTRAINTS;
DROP TABLE TB_USER_COLL_SCORES CASCADE CONSTRAINTS;
DROP TABLE TB_COLLECTION_TAG CASCADE CONSTRAINTS;
DROP TABLE TB_CHAT CASCADE CONSTRAINTS;
DROP TABLE TB_CHAT_USERS CASCADE CONSTRAINTS;
DROP TABLE TB_TAG CASCADE CONSTRAINTS;
DROP TABLE TB_FACEID CASCADE CONSTRAINTS;
DROP TABLE TB_COLL_BOOKMARK CASCADE CONSTRAINTS;
DROP TABLE TB_REPORT CASCADE CONSTRAINTS;
DROP TABLE TB_COLL_LIKE CASCADE CONSTRAINTS;
DROP TABLE TB_MEMORY CASCADE CONSTRAINTS;
DROP TABLE TB_COLLECTION CASCADE CONSTRAINTS;
DROP TABLE TB_RELATIONSHIP CASCADE CONSTRAINTS;
DROP TABLE TB_SOCIAL_USER CASCADE CONSTRAINTS;
DROP TABLE TB_PHONE_VERIFICATION CASCADE CONSTRAINTS;
DROP TABLE TB_TOKEN CASCADE CONSTRAINTS;
DROP TABLE TB_PWD CASCADE CONSTRAINTS;
DROP TABLE TB_USER CASCADE CONSTRAINTS;

---

-- TB_USER Table
CREATE TABLE TB_USER (
    userid VARCHAR2(50) PRIMARY KEY,
    name VARCHAR2(20),
    birthday DATE,
    password VARCHAR2(100) NOT NULL,
    role VARCHAR2(20),
    auto_login_flag VARCHAR2(2) DEFAULT 'N',
    auto_login_token VARCHAR2(255),
    registration_date DATE DEFAULT SYSDATE,
    loginid VARCHAR2(50) NOT NULL UNIQUE,
    nickname VARCHAR2(50),
    phone VARCHAR2(100) UNIQUE,
    profile_image_path VARCHAR2(200),
    sanction_count NUMBER DEFAULT 0,
    status_message VARCHAR2(200),
    face_login_use VARCHAR2(1) DEFAULT 'N'
);
COMMENT ON TABLE TB_USER IS '사용자 정보 테이블';
COMMENT ON COLUMN TB_USER.userid IS '사용자ID';
COMMENT ON COLUMN TB_USER.name IS '유저명';
COMMENT ON COLUMN TB_USER.birthday IS '생년월일';
COMMENT ON COLUMN TB_USER.password IS '비밀번호';
COMMENT ON COLUMN TB_USER.role IS '권한';
COMMENT ON COLUMN TB_USER.auto_login_flag IS '자동로그인여부';
COMMENT ON COLUMN TB_USER.auto_login_token IS '자동로그인토큰';
COMMENT ON COLUMN TB_USER.registration_date IS '가입일자';
COMMENT ON COLUMN TB_USER.loginid IS '로그인ID';
COMMENT ON COLUMN TB_USER.nickname IS '닉네임';
COMMENT ON COLUMN TB_USER.phone IS '전화번호';
COMMENT ON COLUMN TB_USER.profile_image_path IS '프로필이미지위치';
COMMENT ON COLUMN TB_USER.sanction_count IS '제제횟수';
COMMENT ON COLUMN TB_USER.status_message IS '상태메세지';
COMMENT ON COLUMN TB_USER.face_login_use IS 'Facelogin사용유무';

---

-- TB_PWD Table
CREATE TABLE TB_PWD (
    userid VARCHAR2(50) PRIMARY KEY,
    ch_pwd DATE DEFAULT SYSDATE,
    prev_pwd VARCHAR2(100),
    curr_pwd VARCHAR2(100) NOT NULL,
    CONSTRAINT FK_PWD_USER FOREIGN KEY (userid) REFERENCES TB_USER(userid)
);
COMMENT ON TABLE TB_PWD IS '비밀번호 정보 테이블';
COMMENT ON COLUMN TB_PWD.userid IS '사용자ID';
COMMENT ON COLUMN TB_PWD.ch_pwd IS '비밀번호 변경일';
COMMENT ON COLUMN TB_PWD.prev_pwd IS '이전비밀번호';
COMMENT ON COLUMN TB_PWD.curr_pwd IS '현재비밀번호';

---

-- TB_TOKEN Table
CREATE TABLE TB_TOKEN (
    userid VARCHAR2(50) NOT NULL,
    tokenid VARCHAR2(255) PRIMARY KEY,
    CONSTRAINT FK_TOKEN_USER FOREIGN KEY (userid) REFERENCES TB_USER(userid)
);
COMMENT ON TABLE TB_TOKEN IS '토큰 정보 테이블';
COMMENT ON COLUMN TB_TOKEN.userid IS '사용자ID';
COMMENT ON COLUMN TB_TOKEN.tokenid IS '토큰ID';

---

-- TB_PHONE_VERIFICATION Table
CREATE TABLE TB_PHONE_VERIFICATION (
    phone VARCHAR2(100) PRIMARY KEY,
    verification_code VARCHAR2(10) NOT NULL,
    expiration_timestamp TIMESTAMP NOT NULL,
    CONSTRAINT FK_PHONE_VERI_USER FOREIGN KEY (phone) REFERENCES TB_USER(phone)
);
COMMENT ON TABLE TB_PHONE_VERIFICATION IS '전화번호 인증 정보 테이블';
COMMENT ON COLUMN TB_PHONE_VERIFICATION.phone IS '전화번호';
COMMENT ON COLUMN TB_PHONE_VERIFICATION.verification_code IS '인증코드';
COMMENT ON COLUMN TB_PHONE_VERIFICATION.expiration_timestamp IS '만료일시';

---

-- TB_SOCIAL_USER Table
CREATE TABLE TB_SOCIAL_USER (
    socialuserid VARCHAR2(50) PRIMARY KEY,
    userid VARCHAR2(50) UNIQUE NOT NULL,
    socialid VARCHAR2(50) NOT NULL,
    social_type VARCHAR2(10),
    CONSTRAINT UK_SOCIAL_ID_TYPE UNIQUE (socialid, social_type),
    CONSTRAINT FK_SOCIAL_USER_USER FOREIGN KEY (userid) REFERENCES TB_USER(userid)
);
COMMENT ON TABLE TB_SOCIAL_USER IS '소셜 사용자 정보 테이블';
COMMENT ON COLUMN TB_SOCIAL_USER.socialuserid IS '소셜유저ID';
COMMENT ON COLUMN TB_SOCIAL_USER.userid IS '사용자ID';
COMMENT ON COLUMN TB_SOCIAL_USER.socialid IS '소셜ID';
COMMENT ON COLUMN TB_SOCIAL_USER.social_type IS '소셜타입';

---

-- TB_RELATIONSHIP Table
CREATE TABLE TB_RELATIONSHIP (
    userid VARCHAR2(50) NOT NULL,
    targetid VARCHAR2(50) NOT NULL,
    follow_date DATE DEFAULT SYSDATE NOT NULL,
    status VARCHAR2(10) NOT NULL,
    PRIMARY KEY (userid, targetid),
    CONSTRAINT FK_REL_USERID FOREIGN KEY (userid) REFERENCES TB_USER(userid),
    CONSTRAINT FK_REL_TARGETID FOREIGN KEY (targetid) REFERENCES TB_USER(userid)
);
COMMENT ON TABLE TB_RELATIONSHIP IS '사용자 관계 테이블';
COMMENT ON COLUMN TB_RELATIONSHIP.userid IS '사용자ID';
COMMENT ON COLUMN TB_RELATIONSHIP.targetid IS '상대ID';
COMMENT ON COLUMN TB_RELATIONSHIP.follow_date IS '팔로우날짜';
COMMENT ON COLUMN TB_RELATIONSHIP.status IS '상태 (0: 요청 1:팔로우 2:차단)';

---

-- TB_COLLECTION Table
CREATE TABLE TB_COLLECTION (
    collectionid VARCHAR2(50) PRIMARY KEY,
    authorid VARCHAR2(50) NOT NULL,
    collection_title VARCHAR2(255) NOT NULL,
    read_count NUMBER DEFAULT 0 NOT NULL,
    visibility NUMBER DEFAULT 1 NOT NULL,
    created_date DATE DEFAULT SYSDATE NOT NULL,
    title_embedding CLOB,
    color VARCHAR2(50) NOT NULL,
    CONSTRAINT FK_COLL_AUTHOR FOREIGN KEY (authorid) REFERENCES TB_USER(userid)
);
COMMENT ON TABLE TB_COLLECTION IS '컬렉션 정보 테이블';
COMMENT ON COLUMN TB_COLLECTION.collectionid IS '컬렉션ID';
COMMENT ON COLUMN TB_COLLECTION.authorid IS '작성자ID';
COMMENT ON COLUMN TB_COLLECTION.collection_title IS '컬렉션_제목';
COMMENT ON COLUMN TB_COLLECTION.read_count IS '조회수';
COMMENT ON COLUMN TB_COLLECTION.visibility IS '공유범위 (1:public, 2: follwer, 3: private)';
COMMENT ON COLUMN TB_COLLECTION.created_date IS '작성일자';
COMMENT ON COLUMN TB_COLLECTION.title_embedding IS '컬렉션 타이틀 임베딩';
COMMENT ON COLUMN TB_COLLECTION.color IS '색깔';

---

-- TB_MEMORY Table
CREATE TABLE TB_MEMORY (
    memoryid NUMBER PRIMARY KEY,
    memory_type VARCHAR2(50) NOT NULL,
    collectionid VARCHAR2(50) NOT NULL,
    title VARCHAR2(100) NOT NULL,
    content CLOB NOT NULL, 
    filename VARCHAR2(255),
    filepath VARCHAR2(200),
    created_date DATE NOT NULL,
memory_order NUMBER NOT NULL,

    CONSTRAINT FK_MEMORY_COLLECTION FOREIGN KEY (collectionid) REFERENCES TB_COLLECTION(collectionid)
);
COMMENT ON TABLE TB_MEMORY IS '메모리 정보 테이블';
COMMENT ON COLUMN TB_MEMORY.memoryid IS '게시글ID';
COMMENT ON COLUMN TB_MEMORY.memory_type IS '게시글유형';
COMMENT ON COLUMN TB_MEMORY.collectionid IS '컬렉션id';
COMMENT ON COLUMN TB_MEMORY.title IS '제목';
COMMENT ON COLUMN TB_MEMORY.content IS '내용';
COMMENT ON COLUMN TB_MEMORY.filename IS '저장파일명';
COMMENT ON COLUMN TB_MEMORY.filepath IS '저장파일경로';
COMMENT ON COLUMN TB_MEMORY.created_date IS '작성일자';
COMMENT ON COLUMN TB_MEMORY.memory_order IS '컬렉션 내 메모리 나열 순서';


---

-- TB_COLL_LIKE Table
CREATE TABLE TB_COLL_LIKE (
    collectionid VARCHAR2(50) NOT NULL,
    userid VARCHAR2(50) NOT NULL,
    liked_date DATE DEFAULT SYSDATE NOT NULL,
    PRIMARY KEY (collectionid, userid),
    CONSTRAINT FK_LIKE_COLLECTION FOREIGN KEY (collectionid) REFERENCES TB_COLLECTION(collectionid),
    CONSTRAINT FK_LIKE_USER FOREIGN KEY (userid) REFERENCES TB_USER(userid)
);
COMMENT ON TABLE TB_COLL_LIKE IS '컬렉션 좋아요 테이블';
COMMENT ON COLUMN TB_COLL_LIKE.collectionid IS '좋아요한 컬렉션 아이디';
COMMENT ON COLUMN TB_COLL_LIKE.userid IS '좋아요한 유저';
COMMENT ON COLUMN TB_COLL_LIKE.liked_date IS '좋아요 한 날짜';

---

-- TB_REPORT Table
CREATE TABLE TB_REPORT (
    memoryid NUMBER NOT NULL,
    userid VARCHAR2(50) NOT NULL,
    report_reason VARCHAR2(200),
    PRIMARY KEY (memoryid, userid),
    CONSTRAINT FK_REPORT_MEMORY FOREIGN KEY (memoryid) REFERENCES TB_MEMORY(memoryid),
    CONSTRAINT FK_REPORT_USER FOREIGN KEY (userid) REFERENCES TB_USER(userid)
);
COMMENT ON TABLE TB_REPORT IS '신고 정보 테이블';
COMMENT ON COLUMN TB_REPORT.memoryid IS '신고 대상 메모리 아이디';
COMMENT ON COLUMN TB_REPORT.userid IS '신고자 아이디';
COMMENT ON COLUMN TB_REPORT.report_reason IS '신고 사유';

---

-- TB_COLL_BOOKMARK Table
CREATE TABLE TB_COLL_BOOKMARK (
    userid VARCHAR2(50) NOT NULL,
    collectionid VARCHAR2(50) NOT NULL,
    PRIMARY KEY (userid, collectionid),
    CONSTRAINT FK_BOOKMARK_USER FOREIGN KEY (userid) REFERENCES TB_USER(userid),
    CONSTRAINT FK_BOOKMARK_COLLECTION FOREIGN KEY (collectionid) REFERENCES TB_COLLECTION(collectionid)
);
COMMENT ON TABLE TB_COLL_BOOKMARK IS '컬렉션 북마크 테이블';
COMMENT ON COLUMN TB_COLL_BOOKMARK.userid IS '다른 유저의 컬렉션을 북마크한 유저';
COMMENT ON COLUMN TB_COLL_BOOKMARK.collectionid IS '북마크된 대상 컬렉션';

---

-- TB_FACEID Table
CREATE TABLE TB_FACEID (
    faceid VARCHAR2(50) PRIMARY KEY,
    userid VARCHAR2(50) NOT NULL,
    face_path VARCHAR2(100),
    description VARCHAR2(100),
    CONSTRAINT FK_FACEID_USER FOREIGN KEY (userid) REFERENCES TB_USER(userid)
);
COMMENT ON TABLE TB_FACEID IS 'Face ID 정보 테이블';
COMMENT ON COLUMN TB_FACEID.faceid IS 'faceID';
COMMENT ON COLUMN TB_FACEID.userid IS '사용자ID';
COMMENT ON COLUMN TB_FACEID.face_path IS 'FacePath';
COMMENT ON COLUMN TB_FACEID.description IS '설명';

---

-- TB_TAG Table
CREATE TABLE TB_TAG (
    tagid NUMBER PRIMARY KEY, 
    tag_name VARCHAR2(255),
    search_count NUMBER DEFAULT 0,
like_count NUMBER DEFAULT 0,
    tag_embedding CLOB
);
COMMENT ON TABLE TB_TAG IS '태그 정보 테이블';
COMMENT ON COLUMN TB_TAG.tagid IS '태그 ID';
COMMENT ON COLUMN TB_TAG.tag_name IS '태그 자체';
COMMENT ON COLUMN TB_TAG.search_count IS '태그가 검색된 횟수';
COMMENT ON COLUMN TB_TAG.tag_embedding IS '태그 임베딩';
COMMENT ON COLUMN TB_TAG.like_count  IS '태그가 포함된 컬렉션이 좋아요된 수';

---

-- TB_CHAT_USERS Table
CREATE TABLE TB_CHAT_USERS (
    chatroomid VARCHAR2(50) NOT NULL,
    userid VARCHAR2(50) NOT NULL,
    PRIMARY KEY (chatroomid, userid),
    CONSTRAINT FK_CHAT_USERS_USER FOREIGN KEY (userid) REFERENCES TB_USER(userid)
);
COMMENT ON TABLE TB_CHAT_USERS IS '채팅방 사용자 테이블';
COMMENT ON COLUMN TB_CHAT_USERS.chatroomid IS '채팅방ID';
COMMENT ON COLUMN TB_CHAT_USERS.userid IS '유저ID';

---

-- TB_CHAT Table
CREATE TABLE TB_CHAT (
    chat_id NUMBER PRIMARY KEY,
    chatroomid VARCHAR2(50) NOT NULL,
    userid VARCHAR2(50) NOT NULL,
    message_content VARCHAR2(4000),
    sent_time DATE,
    read NUMBER(1),
    CONSTRAINT FK_CHAT_CHATROOM_USER FOREIGN KEY (chatroomid, userid) REFERENCES TB_CHAT_USERS(chatroomid, userid)
);
COMMENT ON TABLE TB_CHAT IS '채팅 메시지 테이블';
COMMENT ON COLUMN TB_CHAT.chat_id IS '챗 ID';
COMMENT ON COLUMN TB_CHAT.chatroomid IS '채팅방ID';
COMMENT ON COLUMN TB_CHAT.userid IS '유저ID';
COMMENT ON COLUMN TB_CHAT.message_content IS '챗팅내용';
COMMENT ON COLUMN TB_CHAT.sent_time IS '전송시간';
COMMENT ON COLUMN TB_CHAT.read IS '읽었는지 확인';

---

-- TB_COLLECTION_TAG Table
CREATE TABLE TB_COLLECTION_TAG (
    collectionid VARCHAR2(50) NOT NULL,
    tagid NUMBER NOT NULL, 
    PRIMARY KEY (collectionid, tagid),
    CONSTRAINT FK_COLL_TAG_COLL FOREIGN KEY (collectionid) REFERENCES TB_COLLECTION(collectionid),
    CONSTRAINT FK_COLL_TAG_TAG FOREIGN KEY (tagid) REFERENCES TB_TAG(tagid)
);
COMMENT ON TABLE TB_COLLECTION_TAG IS '컬렉션-태그 매핑 테이블';
COMMENT ON COLUMN TB_COLLECTION_TAG.collectionid IS '컬렉션ID';
COMMENT ON COLUMN TB_COLLECTION_TAG.tagid IS '태그ID';

---

-- TB_USER_COLL_SCORES Table
CREATE TABLE TB_USER_COLL_SCORES (
    userid VARCHAR2(50) NOT NULL,
    collectionid VARCHAR2(50) NOT NULL,
    score FLOAT DEFAULT 10,
    seen NUMBER DEFAULT 0,
    interacted NUMBER DEFAULT 0,
    recommended_at DATE,
    PRIMARY KEY (userid, collectionid),
    CONSTRAINT FK_USER_SCORE_USER FOREIGN KEY (userid) REFERENCES TB_USER(userid),
    CONSTRAINT FK_USER_SCORE_COLL FOREIGN KEY (collectionid) REFERENCES TB_COLLECTION(collectionid)
);
COMMENT ON TABLE TB_USER_COLL_SCORES IS '사용자별 컬렉션 추천 점수 테이블';
COMMENT ON COLUMN TB_USER_COLL_SCORES.userid IS '사용자ID';
COMMENT ON COLUMN TB_USER_COLL_SCORES.collectionid IS '컬렉션ID';
COMMENT ON COLUMN TB_USER_COLL_SCORES.score IS '추천 점수(높을수록 우선순위 높음)';
COMMENT ON COLUMN TB_USER_COLL_SCORES.seen IS '0: 추천 안 됨/ 1: 추천됨';
COMMENT ON COLUMN TB_USER_COLL_SCORES.interacted IS '0: 좋아요/북마크 함/ 1: 안함';
COMMENT ON COLUMN TB_USER_COLL_SCORES.recommended_at IS '마지막으로 추천되었던 시점';

---

-- TB_TAG_TITLE_SIMILARITY Table
CREATE TABLE TB_TAG_TITLE_SIMILARITY (
    tagid NUMBER NOT NULL, 
    collectionid VARCHAR2(50) NOT NULL,
    similarity_score FLOAT NOT NULL,
    calc_date DATE NOT NULL,
    PRIMARY KEY (tagid, collectionid),
    CONSTRAINT FK_TAG_SIM_TAG FOREIGN KEY (tagid) REFERENCES TB_TAG(tagid),
    CONSTRAINT FK_TAG_SIM_COLL FOREIGN KEY (collectionid) REFERENCES TB_COLLECTION(collectionid)
);
COMMENT ON TABLE TB_TAG_TITLE_SIMILARITY IS '태그-컬렉션 유사도 테이블';
COMMENT ON COLUMN TB_TAG_TITLE_SIMILARITY.tagid IS '태그 id';
COMMENT ON COLUMN TB_TAG_TITLE_SIMILARITY.collectionid IS '컬렉션 id';
COMMENT ON COLUMN TB_TAG_TITLE_SIMILARITY.similarity_score IS '유사도 계산 결과';
COMMENT ON COLUMN TB_TAG_TITLE_SIMILARITY.calc_date IS '유사도 계산 시점';




